// Code generated by "script/dtogen". DO NOT EDIT.
package daocore

import (
    "context"
    "database/sql"
    "strings"
    "time"

    "github.com/Masterminds/squirrel"
    "github.com/nnaakkaaii/go-http-server-template/pkg/dberror"
)

const UserSessionTableName = "user_sessions"

var UserSessionAllColumns = []string{
    "id",
    "user_id",
    "created_at",
    "updated_at",
}

var UserSessionColumnsWOMagics = []string{
    "id",
    "user_id",
}

var UserSessionPrimaryKeyColumns = []string{
    "id",
}

type UserSession struct {
    ID string
    UserID string
    CreatedAt *time.Time
    UpdatedAt *time.Time
}

func (t *UserSession) Values() []interface{} {
    return []interface{}{
        t.ID,
        t.UserID,
    }
}

func (t *UserSession) SetMap() map[string]interface{} {
    return map[string]interface{}{
        "id": t.ID,
        "user_id": t.UserID,
    }
}

func (t *UserSession) Ptrs() []interface{} {
    return []interface{}{
        &t.ID,
        &t.UserID,
        &t.CreatedAt,
        &t.UpdatedAt,
    }
}

func IterateUserSession(sc interface{ Scan(...interface{}) error}) (UserSession, error) {
    t := UserSession{}
    if err := sc.Scan(t.Ptrs()...); err != nil {
        return UserSession{}, dberror.MapError(err)
    }
    return t, nil
}

func SelectOneUserSessionByUserID(ctx context.Context, txn *sql.Tx, user_id *string) (UserSession, error) {
    eq := squirrel.Eq{}
    if user_id != nil {
        eq["user_id"] = *user_id
    }
    query, params, err := squirrel.
        Select(UserSessionAllColumns...).
        From(UserSessionTableName).
        Where(eq).
        ToSql()
    if err != nil {
        return UserSession{}, dberror.MapError(err)
    }
    stmt, err := txn.PrepareContext(ctx, query)
    if err != nil {
        return UserSession{}, dberror.MapError(err)
    }
    return IterateUserSession(stmt.QueryRowContext(ctx, params...))
}

func SelectOneUserSessionByID(ctx context.Context, txn *sql.Tx, id *string) (UserSession, error) {
    eq := squirrel.Eq{}
    if id != nil {
        eq["id"] = *id
    }
    query, params, err := squirrel.
        Select(UserSessionAllColumns...).
        From(UserSessionTableName).
        Where(eq).
        ToSql()
    if err != nil {
        return UserSession{}, dberror.MapError(err)
    }
    stmt, err := txn.PrepareContext(ctx, query)
    if err != nil {
        return UserSession{}, dberror.MapError(err)
    }
    return IterateUserSession(stmt.QueryRowContext(ctx, params...))
}



func InsertUserSession(ctx context.Context, txn *sql.Tx, records []*UserSession) error {
    for i := range records {
        if records[i] == nil {
            records = append(records[:i], records[i+1:]...)
        }
    }
    if len(records) == 0 {
        return nil
    }
    sq := squirrel.Insert(UserSessionTableName).Columns(UserSessionColumnsWOMagics...)
    for _, r := range records {
        if r == nil {
            continue
        }
        sq = sq.Values(r.Values()...)
    }
    query, params, err := sq.ToSql()
    if err != nil {
        return err
    }
    stmt, err := txn.PrepareContext(ctx, query)
    if err != nil {
        return dberror.MapError(err)
    }
    if _, err = stmt.Exec(params...); err != nil {
        return dberror.MapError(err)
    }
    return nil
}

func UpdateUserSession(ctx context.Context, txn *sql.Tx, record UserSession) error {
    sql, params, err := squirrel.Update(UserSessionTableName).SetMap(record.SetMap()).
        Where(squirrel.Eq{
        "id": record.ID,
    }).
        ToSql()
    if err != nil {
        return err
    }
    stmt, err := txn.PrepareContext(ctx, sql)
    if err != nil {
        return dberror.MapError(err)
    }
    if _, err = stmt.Exec(params...); err != nil {
        return dberror.MapError(err)
    }
    return nil
}

func UpsertUserSession(ctx context.Context, txn *sql.Tx, record UserSession) error {
    updateSQL, params, err := squirrel.Update(UserSessionTableName).SetMap(record.SetMap()).ToSql()
    if err != nil {
        return err
    }
    updateSQL = strings.TrimPrefix(updateSQL, "UPDATE "+UserSessionTableName+" SET ")
    query, params, err := squirrel.Insert(UserSessionTableName).Columns(UserSessionColumnsWOMagics...).Values(record.Values()...).SuffixExpr(squirrel.Expr("ON DUPLICATE KEY UPDATE "+updateSQL, params...)).ToSql()
    if err != nil {
        return err
    }
    stmt, err := txn.PrepareContext(ctx, query)
    if err != nil {
        return dberror.MapError(err)
    }
    if _, err = stmt.Exec(params...); err != nil {
        return dberror.MapError(err)
    }
    return nil
}

func DeleteOneUserSessionByUserID(ctx context.Context, txn *sql.Tx, user_id *string) error {
    eq := squirrel.Eq{}
    eq["user_id"] = user_id

    query, params, err := squirrel.
        Delete(UserSessionTableName).
        Where(eq).
        ToSql()
    if err != nil {
        return dberror.MapError(err)
    }
    stmt, err := txn.PrepareContext(ctx, query)
    if err != nil {
        return dberror.MapError(err)
    }
    if _, err = stmt.Exec(params...); err != nil {
        return dberror.MapError(err)
    }
    return nil
}

func DeleteOneUserSessionByID(ctx context.Context, txn *sql.Tx, id *string) error {
    eq := squirrel.Eq{}
    eq["id"] = id

    query, params, err := squirrel.
        Delete(UserSessionTableName).
        Where(eq).
        ToSql()
    if err != nil {
        return dberror.MapError(err)
    }
    stmt, err := txn.PrepareContext(ctx, query)
    if err != nil {
        return dberror.MapError(err)
    }
    if _, err = stmt.Exec(params...); err != nil {
        return dberror.MapError(err)
    }
    return nil
}

